<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="PythonScript" module="Products.PythonScripts.PythonScript"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>Script_magic</string> </key>
            <value> <int>3</int> </value>
        </item>
        <item>
            <key> <string>_bind_names</string> </key>
            <value>
              <object>
                <klass>
                  <global name="NameAssignments" module="Shared.DC.Scripts.Bindings"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>_asgns</string> </key>
                        <value>
                          <dictionary>
                            <item>
                                <key> <string>name_container</string> </key>
                                <value> <string>container</string> </value>
                            </item>
                            <item>
                                <key> <string>name_context</string> </key>
                                <value> <string>context</string> </value>
                            </item>
                            <item>
                                <key> <string>name_m_self</string> </key>
                                <value> <string>script</string> </value>
                            </item>
                            <item>
                                <key> <string>name_subpath</string> </key>
                                <value> <string>traverse_subpath</string> </value>
                            </item>
                          </dictionary>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>_body</string> </key>
            <value> <string>from DateTime import DateTime\n
\n
computer = context\n
portal = context.getPortalObject()\n
allocation_scope = computer.getAllocationScope()\n
computer_reference = computer.getReference()\n
\n
if allocation_scope != \'open/public\' and \\\n
   allocation_scope != \'open/friend\':\n
  return\n
\n
is_service_provider = False\n
person = computer.getSourceAdministrationValue(portal_type="Person")\n
if not person:\n
  return\n
\n
for assignment in person.contentValues(portal_type="Assignment"):\n
  if assignment.getRole() == \'service_provider\':\n
    is_service_provider = True\n
    break\n
\n
if not is_service_provider:\n
  #Turn this computer allocation scope to \'open/personal\'\n
  edit_kw = {\n
    \'allocation_scope\': \'open/personal\',\n
  }\n
  computer.edit(**edit_kw)\n
\n
  # Create a ticket (or re-open it) for this issue!\n
  support_request = None\n
  request_title = \'[MONITORING] Allocation scope has been changed for %s\' % computer_reference\n
  request_description = \'Allocation scope has been changed back to \' \\\n
                       \'open/personal for %s\' % computer_reference\n
  message_title = \'We have changed allocation scope for %s\' % computer_reference\n
  notification_reference = \'slapos-crm-computer_allocation_scope.notification\'\n
  notification_message = portal.portal_notifications.getDocumentValue(\n
                 reference=notification_reference)\n
  mapping_dict = {\'computer_title\':computer.getTitle(),\n
                  \'computer_id\':computer_reference,\n
                  \'allocation_scope\':allocation_scope}\n
  message = notification_message.asText(\n
            substitution_method_parameter_dict={\'mapping_dict\':mapping_dict})\n
            \n
  support_request_url = context.Base_generateSupportRequestForSlapOS(\n
                 request_title,\n
                 request_description,\n
                 computer.getRelativeUrl()\n
               )\n
  if support_request_url:\n
    support_request = portal.restrictedTraverse(support_request_url)\n
    support_request.suspend()\n
  else:\n
    # XXX - Base_generateSupportRequestForSlapOS return None if the \n
    # support_request already exist, but we want to use it again so...\n
    support_request = portal.portal_catalog.getResultValue(\n
          portal_type = \'Support Request\',\n
          title = request_title,\n
          simulation_state = \'suspended\',\n
          source_project_uid = computer.getUid()\n
    )\n
  if support_request is None:\n
    # Existing ticket not found, can not create event for the moment\n
    return\n
  \n
  support_request.SupportRequest_trySendNotificationMessage(message_title,\n
              message, person.getRelativeUrl())\n
</string> </value>
        </item>
        <item>
            <key> <string>_params</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>id</string> </key>
            <value> <string>Computer_checkAndUpdateAllocationScope</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
